@page "/"
@page "/{moodboardIdParameter}"
@using MoodBoard.Shared;
@using MoodBoard.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if (showPage)
{
    <div class="infoText">
        & feel free to <a target="_blank" href="https://github.com/petermarnef/teammoodboard">contribute</a>.<br><br>
        <b>See how your team is feeling about the work you have done!</b>
        <ul>
            <li>By surfing to this page you got a unique moodboard</li>
            <li>Copy/paste the URL and give it to your team members</li>
            <li>Start voting and discover the mood for your team</li>
        </ul>
        (click <a target="_blank" href="http://teammoodboard.com">here</a> for a new moodboard)
    </div>
    <div class="container">
        @foreach (var topic in configuration)
        {
            <div class="topic">@topic.Name <span class="voteCount">@GetVoteCountForTopic(topic.Id)</span></div>
            @foreach (var option in topic.VoteOptions)
            {
                <div>
                @if (votingClosed)
                {
                    var voteCountForOption = GetVoteCountForOption(topic.Id, option.Id);
                    <div class="icon @(voteCountForOption > 0 ? "winner" : "loser")">
                        @option.Emoji <span class="voteCount">@voteCountForOption</span>
                    </div>
                }
                else
                {
                    <div class="icon @(AlreadyVoted(option.Id, topic.Id) ? "voted" : "")" 
                        @onclick="() => ProcessVote(option.Id, topic)">@option.Emoji <span class="voteCount placeholder">?</span>
                    </div>                
                }
                </div>
            }
        }
    </div>
    @if (votedOnAllTopics && !votingClosed)
    {
        <button class="button" @onclick="ShowResults">Click to see team results!</button>
    }        
}

@code {
    [Parameter]
    public string moodboardIdParameter { get; set; }

    private List<Vote> votes = new List<Vote>();
    private bool showPage = false;
    private Guid moodboardId;
    private List<VoteTopic> configuration;
    private HubConnection voteHub;
    private Guid sessionId = Guid.NewGuid();
    private bool votedOnAllTopics = false;
    private bool votingClosed = false;

    protected override async Task OnInitializedAsync()
    {
        GenerateNewMoodboardIdIfNoValidIdFound();
        InitializeVotingTopics();
        await RegisterWithServer();
        await GetVotesFromServer();
        showPage = true;
    }

    void InitializeVotingTopics()
    {
        //Voting topics can be added without other changes
        //For additional voting options changes are needed

        this.configuration = new List<VoteTopic> {
            new VoteTopic(1, "Team", new List<VoteOption> {
                new VoteOption(1, "🤠"),
                new VoteOption(2, "🙂"),
                new VoteOption(3, "😭")
            }),
            new VoteTopic(2, "Process", new List<VoteOption> {
                new VoteOption(1, "🤠"),
                new VoteOption(2, "🙂"),
                new VoteOption(3, "😭")
            }),
            new VoteTopic(3, "End result", new List<VoteOption> {
                new VoteOption(1, "🤠"),
                new VoteOption(2, "🙂"),
                new VoteOption(3, "😭")
            }),
            new VoteTopic(4, "How I felt", new List<VoteOption> {
                new VoteOption(1, "😎"),
                new VoteOption(2, "😖"),
                new VoteOption(3, "😤")
            })
        };
    }

    void GenerateNewMoodboardIdIfNoValidIdFound()
    {
        bool validGuidFound = Guid.TryParse(this.moodboardIdParameter, out this.moodboardId);

        if (!validGuidFound)
        {
            var newMoodboardId = Guid.NewGuid();
            NavigationManager.NavigateTo($"/{newMoodboardId}");
            this.moodboardId = newMoodboardId;
        }
    }

    async Task RegisterWithServer() {
        voteHub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/votehub"))
            .Build();
        voteHub.On<List<Vote>>("ReceiveVotes", (votes) => ProcessReceivedVotes(votes));
        await voteHub.StartAsync();        
        await voteHub.InvokeAsync("AddClientToMoodboard", this.moodboardId);
    }

    void ShowResults()
    {
        votingClosed = true;
    }

    void VotedOnAllTopicsCheck()
    {
        if (votes
                .Count(vote => vote.sessionId == sessionId)
                .Equals(configuration.Count() - 1))
        {
            votedOnAllTopics = true;
        }
    }

    void ProcessReceivedVotes(List<Vote> votes)
    {
        this.votes = votes;
        StateHasChanged();
    }

    int GetVoteCountForTopic(int topicId)
    {
        return votes.Count(vote => vote.topicId == topicId);
    }    

    int GetVoteCountForOption(int topicId, int optionId)
    {
        return votes.Count(vote => vote.topicId == topicId && vote.VoteId == optionId); 
    }

    bool AlreadyVoted(int voteId, int topicId)
    {
        return votes.Any(vote => 
            vote.sessionId == sessionId
            && vote.topicId == topicId
            && vote.VoteId == voteId);        
    }

    async Task ProcessVote(int voteId, VoteTopic topic) {
        await voteHub.SendAsync("ProcessVote", new Vote(moodboardId, topic.Id, voteId, sessionId));
        VotedOnAllTopicsCheck();
    }

    Task GetVotesFromServer() =>
        voteHub.InvokeAsync("SendUpdateToAllClients", this.moodboardId);

    public ValueTask DisposeAsync() =>
        voteHub.DisposeAsync();
}