@page "/"
@page "/{moodboardIdParameter}"
@using MoodBoard.Models;
@using MoodBoard.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@implements IAsyncDisposable

@if (client.Initialised)
{
    <div class="container">
        @foreach (var topic in client.Moodboard.Configuration.Topics)
        {
            <div class="card">
                <div class="topic-name">@topic.Name</div>
                <div class="options">
                    @foreach (var option in client.Moodboard.Configuration.Options)
                    {
                        var alreadyVoted = AlreadyVoted(client.SessionId, topic.Id, option.Id);
                        <div class="option @(alreadyVoted ? "voted" : "")"
                             @onclick="() => ProcessVote(client.SessionId, topic.Id, option.Id)">
                            @option.Emoji
                            <span class="voteCount">@GetVoteCountForOption(topic.Id, option.Id)</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@code {

[Parameter]
public string moodboardIdParameter { get; set; }

private Client client = new()
{
    HubConnection = null,
    Moodboard = null,
    SessionId = Guid.Empty,
    Initialised = false
};

protected override async Task OnInitializedAsync()
{
    client.HubConnection = await InitialiseHubConnection();
    client.Moodboard = await InitialiseMoodboard();
    client.SessionId = await InitialiseSessionId(client.Moodboard.Id);

    NavigationManager.NavigateTo($"/{client.Moodboard.Id}");
    await SaveSessionInLocalStorage(client.Moodboard.Id, client.SessionId);
    client.Initialised = true;
}

async Task<Guid> InitialiseSessionId(Guid moodboardId)
{
    var existingSessionId = await LocalStorage.GetItemAsync<Guid>(moodboardId.ToString());
    if (existingSessionId != Guid.Empty)
        return existingSessionId;
    else
        return Guid.NewGuid();
}

async Task<HubConnection> InitialiseHubConnection()
{
    var hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/moodboardHub"))
        .WithAutomaticReconnect()
        .Build();
    hubConnection.On<Moodboard>("MoodboardUpdate", (moodboard) => ProcessUpdateFromHub(moodboard));
    await hubConnection.StartAsync();
    return hubConnection;
}

async Task<Moodboard> InitialiseMoodboard()
{
    var validMoodboardIdFound = Guid.TryParse(moodboardIdParameter, out var moodboardId);

    if (!validMoodboardIdFound)
        moodboardId = Guid.NewGuid();
            
    return await client.HubConnection.InvokeAsync<Moodboard>("RegisterNewClient", moodboardId);
}

async Task SaveSessionInLocalStorage(Guid moodboardId, Guid sessionId)
{
    await LocalStorage.SetItemAsync<Guid>(moodboardId.ToString(), sessionId);
}    

void ProcessUpdateFromHub(Moodboard moodboard)
{
    client.Moodboard = moodboard;
    StateHasChanged();
}

int GetVoteCountForOption(int topicId, int optionId)
{
    return client.Moodboard.Votes.Count(vote => 
        vote.TopicId == topicId && vote.OptionId == optionId);
}    

bool AlreadyVoted(Guid sessionId, int topicId, int optionId)
{
    return client.Moodboard.Votes.Any(vote =>
        vote.ClientSessionId == sessionId
        && vote.TopicId == topicId
        && vote.OptionId == optionId);
}

async Task ProcessVote(Guid sessionId, int topicId, int optionId)
{
    var newVote = new Vote(sessionId, topicId, optionId);

    var existingVoteForSameTopic = client.Moodboard.Votes.Where(vote => 
        vote.ClientSessionId == sessionId
        && vote.TopicId == topicId).SingleOrDefault();

    if (existingVoteForSameTopic == newVote)
        return;

    if (existingVoteForSameTopic != null)
        client.Moodboard.Votes.Remove(existingVoteForSameTopic);

    client.Moodboard.Votes.Add(newVote);
    await client.HubConnection.SendAsync("ProcessUpdatedMoodboard", client.Moodboard);
}

public ValueTask DisposeAsync() =>
    client.HubConnection.DisposeAsync();

}