@page "/moodboard/"
@page "/moodboard/{moodboardIdParameter}"
@using MoodBoard.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>
    .container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    .topic {
        min-width: 50px;
        min-height: 50px;
    }

    .icon {
        min-width: 50px;
        min-height: 50px;
        font-size: 40px;
    }
</style>

@if (showPage)
{
    <span>moodboardid: @moodboardId</span>
    <div class="container">
        <div class="topic">Team</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.TeamHappy)">ðŸ¤  (@votes.Count(vote => vote.voteType.Equals(VoteType.TeamHappy)))</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.TeamMeh)">ðŸ™‚ (@votes.Count(vote => vote.voteType.Equals(VoteType.TeamMeh)))</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.TeamSad)">ðŸ˜­ (@votes.Count(vote => vote.voteType.Equals(VoteType.TeamSad)))</div>
        <div class="topic">Process</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.ProcessHappy)">ðŸ¤  (@votes.Count(vote => vote.voteType.Equals(VoteType.ProcessHappy)))</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.ProcessMeh)">ðŸ™‚ (@votes.Count(vote => vote.voteType.Equals(VoteType.ProcessMeh)))</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.ProcessSad)">ðŸ˜­ (@votes.Count(vote => vote.voteType.Equals(VoteType.ProcessSad)))</div>
        <div class="topic">End result</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.EndResultHappy)">ðŸ¤  (@votes.Count(vote => vote.voteType.Equals(VoteType.EndResultHappy)))</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.EndResultMeh)">ðŸ™‚ (@votes.Count(vote => vote.voteType.Equals(VoteType.EndResultMeh)))</div>
        <div class="icon" @onclick="() => ProcessNewVote(VoteType.EndResultSad)">ðŸ˜­ (@votes.Count(vote => vote.voteType.Equals(VoteType.EndResultSad)))</div>
    </div>
}

@code {
    [Parameter]
    public string moodboardIdParameter { get; set; }

    private List<Vote> votes = new List<Vote>();
    private bool showPage = false;
    private Guid moodboardId;

    private HubConnection voteHub;

    protected override async Task OnInitializedAsync()
    {
        GenerateNewMoodboardIdIfNoValidIdFound();
        await RegisterWithServer();
        await GetVotesFromServer();
        showPage = true;
    }

    void GenerateNewMoodboardIdIfNoValidIdFound()
    {
        bool validGuidFound = Guid.TryParse(this.moodboardIdParameter, out this.moodboardId);

        if (!validGuidFound)
        {
            var newMoodboardId = Guid.NewGuid();
            NavigationManager.NavigateTo($"/moodboard/{newMoodboardId}");
            this.moodboardId = newMoodboardId;
        }
    }

    async Task RegisterWithServer() {
        voteHub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/votehub"))
            .Build();
        voteHub.On<List<Vote>>("ReceiveVotes", (votes) => ProcessReceivedVotes(votes));
        await voteHub.StartAsync();        
        await voteHub.InvokeAsync("AddClientToMoodboard", this.moodboardId);
    }

    void ProcessReceivedVotes(List<Vote> votes)
    {
        this.votes = votes;
        StateHasChanged();
    }

    Task GetVotesFromServer() =>
        voteHub.InvokeAsync("SendUpdateToAllClientsForMoodboard", this.moodboardId);

    Task ProcessNewVote(VoteType voteType) =>
        voteHub.SendAsync("ProcessNewVote", moodboardId, voteType);

    public ValueTask DisposeAsync() =>
        voteHub.DisposeAsync();
}