@page "/moodboard/"
@page "/moodboard/{moodboardIdParameter}"
@using MoodBoard.Shared;
@using MoodBoard.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>
    .container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    .topic {
        min-width: 50px;
        min-height: 50px;
    }

    .icon {
        min-width: 50px;
        min-height: 50px;
        font-size: 40px;
    }

    .icon.notvoted {
        cursor: pointer;
    }     

    .icon.alreadyvoted {
        cursor: not-allowed;
        color: gray;
    }        

    .icon.winner {
        color: red;
    }

    .icon.loser {

    }    
</style>

@if (showPage)
{
    <div class="container">
        @foreach (var topicToRender in topics)
        {
            var alreadyVotedOnTopic = topicsVoted.Contains(topicToRender);
            var voteOptionsForCurrentTopic = topics.Where(topic => topicToRender.Name == topic.Name).First().VoteOptions;
            var voteCountForTopic = votes.Where(vote => voteOptionsForCurrentTopic.Any(x => x.Id.Equals(vote.VoteId)));
            <div class="topic">@topicToRender.Name</div>
            @foreach (var option in topicToRender.VoteOptions)
            {
                var winner = voteCountForTopic.Count() > 0 && voteCountForTopic.GroupBy(vote => vote.VoteId).Select(group => new { VoteId = group.Key, Count = group.Count() }).OrderByDescending(result => result.Count).FirstOrDefault().VoteId == option.Id;
                <div 
                    class="icon @(alreadyVotedOnTopic ? "alreadyvoted" : "notvoted") @(winner ? "winner" : "loser")" 
                    @onclick="() => ProcessNewVote(option.Id, topicToRender, alreadyVotedOnTopic)">@option.Emoji (@votes.Count(vote => vote.VoteId.Equals(option.Id)))
                </div>
            }
        }
    </div>
}

@code {
    [Parameter]
    public string moodboardIdParameter { get; set; }

    private List<Vote> votes = new List<Vote>();
    private List<VoteTopic> topicsVoted = new List<VoteTopic>();
    private bool showPage = false;
    private Guid moodboardId;
    private List<VoteTopic> topics;
    private HubConnection voteHub;

    protected override async Task OnInitializedAsync()
    {
        GenerateNewMoodboardIdIfNoValidIdFound();
        InitializeVotingTopics();
        await RegisterWithServer();
        await GetVotesFromServer();
        showPage = true;
    }

    void InitializeVotingTopics()
    {
        this.topics = new List<VoteTopic> {
            new VoteTopic("Team", new List<VoteOption> {
                new VoteOption(1, "ðŸ¤ "),
                new VoteOption(2, "ðŸ™‚"),
                new VoteOption(3, "ðŸ˜­"),
            }),
            new VoteTopic("Process", new List<VoteOption> {
                new VoteOption(4, "ðŸ¤ "),
                new VoteOption(5, "ðŸ™‚"),
                new VoteOption(6, "ðŸ˜­"),
            }),
            new VoteTopic("End result", new List<VoteOption> {
                new VoteOption(7, "ðŸ¤ "),
                new VoteOption(8, "ðŸ™‚"),
                new VoteOption(9, "ðŸ˜­"),
            })
        };
    }

    void GenerateNewMoodboardIdIfNoValidIdFound()
    {
        bool validGuidFound = Guid.TryParse(this.moodboardIdParameter, out this.moodboardId);

        if (!validGuidFound)
        {
            var newMoodboardId = Guid.NewGuid();
            NavigationManager.NavigateTo($"/moodboard/{newMoodboardId}");
            this.moodboardId = newMoodboardId;
        }
    }

    async Task RegisterWithServer() {
        voteHub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/votehub"))
            .Build();
        voteHub.On<List<Vote>>("ReceiveVotes", (votes) => ProcessReceivedVotes(votes));
        await voteHub.StartAsync();        
        await voteHub.InvokeAsync("AddClientToMoodboard", this.moodboardId);
    }

    void ProcessReceivedVotes(List<Vote> votes)
    {
        this.votes = votes;
        StateHasChanged();
    }

    async Task ProcessNewVote(int voteResult, VoteTopic voteTopic, bool alreadyVotedOnTopic) {
        if (!alreadyVotedOnTopic)
        {
            topicsVoted.Add(voteTopic);
            await voteHub.SendAsync("ProcessNewVote", moodboardId, voteResult);
        }
    }

    Task GetVotesFromServer() =>
        voteHub.InvokeAsync("SendUpdateToAllClients", this.moodboardId);

    public ValueTask DisposeAsync() =>
        voteHub.DisposeAsync();
}