@page "/moodboard/"
@page "/moodboard/{moodboardIdParameter}"
@using MoodBoard.Shared;
@using MoodBoard.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>
    .container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    .topic {
        min-width: 50px;
        min-height: 50px;
    }

    .icon {
        cursor: pointer;
        font-size: 4em;
        opacity: .6;
    }

    .icon.voted {
        opacity: 1;
    }     
</style>

@if (showPage)
{
    <div class="container">
        @foreach (var topic in configuration)
        {
            <div class="topic">@topic.Name (@GetVoteCountForTopic(topic.Id))</div>
            @foreach (var option in topic.VoteOptions)
            {
                <div>
                    <div 
                        class="icon @(AlreadyVoted(option.Id, topic.Id) ? "voted" : "")" 
                        @onclick="() => ProcessVote(option.Id, topic)">@option.Emoji (@GetVoteCountForTopicAndOption(topic.Id, option.Id))
                    </div>
                </div>
            }
        }
    </div>
    @if (votedOnAllTopics)
    {
        <button>Show Results</button>
    }
}

@code {
    [Parameter]
    public string moodboardIdParameter { get; set; }

    private List<Vote> votes = new List<Vote>();
    private bool showPage = false;
    private Guid moodboardId;
    private List<VoteTopic> configuration;
    private HubConnection voteHub;
    private Guid sessionId = Guid.NewGuid();
    private bool votedOnAllTopics = false;

    protected override async Task OnInitializedAsync()
    {
        GenerateNewMoodboardIdIfNoValidIdFound();
        InitializeVotingTopics();
        await RegisterWithServer();
        await GetVotesFromServer();
        showPage = true;
    }

    void InitializeVotingTopics()
    {
        this.configuration = new List<VoteTopic> {
            new VoteTopic(1, "Team", new List<VoteOption> {
                new VoteOption(1, "ðŸ¤ "),
                new VoteOption(2, "ðŸ™‚"),
                new VoteOption(3, "ðŸ˜­"),
            }),
            new VoteTopic(2, "Process", new List<VoteOption> {
                new VoteOption(1, "ðŸ¤ "),
                new VoteOption(2, "ðŸ™‚"),
                new VoteOption(3, "ðŸ˜­"),
            }),
            new VoteTopic(3, "End result", new List<VoteOption> {
                new VoteOption(1, "ðŸ¤ "),
                new VoteOption(2, "ðŸ™‚"),
                new VoteOption(3, "ðŸ˜­"),
            })
        };
    }

    void GenerateNewMoodboardIdIfNoValidIdFound()
    {
        bool validGuidFound = Guid.TryParse(this.moodboardIdParameter, out this.moodboardId);

        if (!validGuidFound)
        {
            var newMoodboardId = Guid.NewGuid();
            NavigationManager.NavigateTo($"/moodboard/{newMoodboardId}");
            this.moodboardId = newMoodboardId;
        }
    }

    async Task RegisterWithServer() {
        voteHub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/votehub"))
            .Build();
        voteHub.On<List<Vote>>("ReceiveVotes", (votes) => ProcessReceivedVotes(votes));
        await voteHub.StartAsync();        
        await voteHub.InvokeAsync("AddClientToMoodboard", this.moodboardId);
    }

    void VotedOnAllTopicsCheck()
    {
        if (votes
                .Count(vote => vote.MoodboardId == moodboardId && vote.sessionId == sessionId)
                .Equals(configuration.Count() - 1))
        {
            votedOnAllTopics = true;
        }
    }

    void ProcessReceivedVotes(List<Vote> votes)
    {
        this.votes = votes;
        StateHasChanged();
    }

    int GetVoteCountForTopic(int topicId)
    {
        return votes.Count(vote => vote.MoodboardId == moodboardId && vote.topicId == topicId);
    }    

    int GetVoteCountForTopicAndOption(int topicId, int optionId)
    {
        return votes.Count(vote => vote.MoodboardId == moodboardId && vote.topicId == topicId && vote.VoteId == optionId); 
    }        

    bool AlreadyVoted(int voteId, int topicId)
    {
        return votes.Any(vote => 
            vote.MoodboardId == moodboardId
            && vote.sessionId == sessionId
            && vote.topicId == topicId
            && vote.VoteId == voteId);        
    }

    async Task ProcessVote(int voteId, VoteTopic topic) {
        await voteHub.SendAsync("ProcessVote", new Vote(moodboardId, topic.Id, voteId, sessionId));
        VotedOnAllTopicsCheck();
    }

    Task GetVotesFromServer() =>
        voteHub.InvokeAsync("SendUpdateToAllClients", this.moodboardId);

    public ValueTask DisposeAsync() =>
        voteHub.DisposeAsync();
}